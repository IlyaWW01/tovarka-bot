import logging
import re
import asyncio
import nest_asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7937031754:AAESUJ3pq0b7BAsjo6tO2MnFjCkiN48iE14"
ORDERS_CHAT_ID = "-1002591802067"
ADMIN_CHAT_ID = "–í–ê–®_TELEGRAM_ID"  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π ID (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @userinfobot)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("orders.log"),  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
user_orders = {}

# FAQ –æ—Ç–≤–µ—Ç—ã
faq_answers = {
    "–∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å": "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: –°–ë–ü –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É.",
    "–∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∞": "–û–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞–≤–∫–∞ 10‚Äì18 –¥–Ω–µ–π.",
    "–≥–¥–µ —Ç–æ–≤–∞—Ä": "–ï—Å–ª–∏ –≤—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑, –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.",
    "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç": "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –º—ã —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –∏ –ø–æ–º–æ–∂–µ–º."
}

# –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
def main_menu():
    return ReplyKeyboardMarkup([[KeyboardButton("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑")]], resize_keyboard=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone: str) -> bool:
    pattern = r'^(\+7|7|8)?[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
    return re.match(pattern, phone) is not None

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª
def log_order(user_id: int, order_data: dict, status: str = "created"):
    log_entry = (
        f"{datetime.now()} | User: {user_id} | "
        f"–ê—Ä—Ç–∏–∫—É–ª: {order_data.get('article')} | "
        f"–ö–æ–ª-–≤–æ: {order_data.get('qty')} | "
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
    )
    with open("orders.log", "a", encoding="utf-8") as f:
        f.write(log_entry)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞—Ä—Ç–∏–∫—É–ª.",
        reply_markup=main_menu()
    )

# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
async def notify_admin(context: ContextTypes.DEFAULT_TYPE, error_msg: str):
    try:
        await context.bot.send_message(
            ADMIN_CHAT_ID,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n{error_msg}"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def route_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower() if update.message.text else ""

    if text == "–Ω–æ–≤—ã–π –∑–∞–∫–∞–∑":
        user_orders.pop(user_id, None)
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞–Ω–∞–ª–∞.", reply_markup=main_menu())
        return

    for q in faq_answers:
        if q in text:
            await update.message.reply_text(faq_answers[q], reply_markup=main_menu())
            return

    if user_id in user_orders:
        await handle_reply(update, context)
    else:
        await handle_article(update, context)

# –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –ø–æ—Å—Ç
async def handle_article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message
    text = msg.caption or msg.text
    photo = msg.photo[-1].file_id if msg.photo else None

    match = re.search(r'(\d{5,})', text) if text else None
    if not match:
        await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=main_menu())
        return

    article = match.group(1)
    user_orders[user_id] = {
        "article": article,
        "photo": photo,
        "step": "qty"
    }
    log_order(user_id, user_orders[user_id])  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
    await msg.reply_text("üì¶ –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?", reply_markup=main_menu())

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî —à–∞–≥–∏
async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    order = user_orders.get(user_id)

    if not order:
        return

    step = order["step"]

    if step == "qty":
        if not text.isdigit():
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —á–∏—Å–ª–æ!", reply_markup=main_menu())
            return
        order["qty"] = text
        order["step"] = "name"
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ –§–ò–û –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=main_menu())

    elif step == "name":
        order["name"] = text
        order["step"] = "phone"
        await update.message.reply_text("üìû –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=main_menu())

    elif step == "phone":
        if not is_valid_phone(text):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu())
            return
        order["phone"] = text
        order["step"] = "confirm"

        summary = (
            f"‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ?\n\n"
            f"üßû –ê—Ä—Ç–∏–∫—É–ª: {order['article']}\n"
            f"üî¢ –ö–æ–ª-–≤–æ: {order['qty']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n\n"
            "‚ö†Ô∏è –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è —Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π.\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"
        )
        keyboard = ReplyKeyboardMarkup([[KeyboardButton("–î–ê")], [KeyboardButton("–ù–µ—Ç")]], resize_keyboard=True)
        await update.message.reply_text(summary, reply_markup=keyboard)

    elif step == "confirm":
        if text.lower() == "–¥–∞":
            msg = (
                f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                f"–ê—Ä—Ç–∏–∫—É–ª: {order['article']}\n"
                f"–ö–æ–ª-–≤–æ: {order['qty']}\n"
                f"–ê–¥—Ä–µ—Å: {order['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                f"Telegram: @{update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
            try:
                if order.get("photo"):
                    await context.bot.send_photo(ORDERS_CHAT_ID, order["photo"], caption=msg)
                else:
                    await context.bot.send_message(ORDERS_CHAT_ID, msg)
                await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu())
                log_order(user_id, order, "completed")  # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–∫–∞–∑
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {e}"
                logging.error(error_msg)
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())
                await notify_admin(context, error_msg)  # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        else:
            await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu())
            log_order(user_id, order, "cancelled")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
        user_orders.pop(user_id, None)

# –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, route_message))
    app.add_handler(MessageHandler(filters.PHOTO, route_message))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    loop.create_task(main())
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
